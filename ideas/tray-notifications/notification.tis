class Notification 
{
  const WAIT_TIMER       = 5s; // 消息显示时长
  const TOAST_WAIT_TIMER = 3s; // 消息显示时长
  const TYPE_TOAST       = "toast";
  const TYPE_TRAY        = "tray";  
  const TYPE_LOADING     = "loading";
  var msgs = {}; // 单例, 同一时间只能有一个消息
   
  function onMouse(evt) {
    if( evt.type == Event.MOUSE_UP ) {
      if( !evt.target.$is(.cancel) )
        return;
      closeIt(this.@#type);
      return true;
    } 
  }
     
  function cancel(notifyType = TYPE_TRAY) { // 如果你想取消显示，则调用这个方法
     var options = msgs[notifyType];
     var msg = options && options.elPopup;
    if (!msg) return;      
    if(msg.attributes["state"] !== undefined) {
      msg.off(".notification."+notifyType);
      msg.attributes["state"] = undefined;
      msg.move();
      if (options.busy) self.state.busy = false;
     if (options.disabled) {
       var shim = self.$(.notification-shim);
       if (shim) shim.detach();
     }
     msgs[notifyType] = null;
    }		 
  }

  // 注意: 动画状态是在CSS中定义的
  function closeIt(notifyType = TYPE_TRAY) {
     var options = msgs[notifyType];
     var msg = options && options.elPopup;
     if (!msg) return;
     msg.off("animationend.notification."+notifyType);  
     
     if(!msg.isVisible) return;
     msg.attributes["state"] = "closed";
     if (options.busy) self.state.busy = false;
     if (options.disabled) {
       var shim = self.$(.notification-shim);
       if (shim) shim.detach();
     }
     msg.on("animationend.notification."+notifyType, function(evt) { 
       msg.off(this function); // 只做一次
       msg.attributes["state"] = undefined;
       msg.postEvent("notification-closed");       
       msg.move();
       msgs[notifyType] = null;
       return true;
     });
  }
  function closeTray() { 
    return this.closeIt(TYPE_TRAY);
  }

  function closeToast() { 
    return this.closeIt(TYPE_TOAST);
  }

  function closeLoading() { 
    return this.closeIt(TYPE_LOADING);
  }
   
  function notify(options) { 
    cancel(options.type);
    
    msgs[options.type] = options;

    var msg = options.elPopup;
    msg.$( content ).html = options.message;
    if (options.type == TYPE_TRAY) {
      msg.on("mouseup.notification."+options.type, onMouse);
      
      var header = msg.$( header );
      if(options.title && header) {
        var caption = header.$(caption);
        if (caption)
          caption.text = options.title;
        else
          header.text = options.title;
      }  
    }
    
    // 设置"off stage"的初始化状态
    msg.attributes["state"] = "initial";
    
    // 计算它的真实尺寸
    msg.move(-10000, -10000);
    var (w,h) = msg.box(#dimension,#border);

    // 获取 **声明的** 外边距宽度, 注意: 由于外边距的合并，它们可能与计算值不一致
    w += msg.toPixels(msg.style#margin-right || "0", #width);
    h += msg.toPixels(msg.style#margin-bottom || "0", #height);

    if (options.type == TYPE_TRAY) {
      var (x1,y1, x2, y2) = view.screenBox(#workarea, #rect);
      msg.move( x2 - w, y2 - h, #screen, #detached-topmost-window );
    }
    else if (options.type == TYPE_TOAST) {
      var (w1, h1) = view.root.box(#dimension, #view);
      var (x, y) = ((w1 - w) / 2, (h1 - h) / 2);
      options.top && (y = options.top);
      options.bottom && (y = h1 - options.bottom);
      msg.move( x, y, #view, #attached-window );
    } 
    else if (options.type == TYPE_LOADING) {
      var (w1, h1) = view.root.box(#dimension, #view);
      var (x, y) = ((w1 - w) / 2, (h1 - h) / 2);
      msg.move( x, y, #view, #attached-window );
    } 
    else return;

    function revealIt() {
      if(!msg.isVisible) return;
      msg.attributes["state"] = "shown";
      if (options.busy) self.state.busy = true;
      if (options.disabled) self.$(body).$append(<div.notification-shim></div>);
      msg.on("animationend.notification."+options.type, function(evt) { 
        if(!msg.isVisible) return;
        msg.off(this function); // 只做一次
        if (options.waitTimer) 
          msg.timer( options.waitTimer, ::closeIt(options.type) );     
        return true;
      });
    }

    // 请求启动"显示动画"
    msg.post( revealIt );	
    return true;    
  }
  
  function show(elPopup, message, title = "", waitTimer = WAIT_TIMER) { 
    return this.notify { elPopup: elPopup, message: message, title: title, waitTimer: waitTimer, type: TYPE_TRAY };
  }
  
  function toast(messageOrOptions, waitTimer = TOAST_WAIT_TIMER) {
    var options = typeof messageOrOptions == #object ? messageOrOptions: { message: messageOrOptions, waitTimer: waitTimer };
    options.type = TYPE_TOAST;
    if (!options.waitTimer) options.waitTimer = TOAST_WAIT_TIMER;
    if (!options.elPopup) {
      options.elPopup = self.$(popup[type={options.type}]);
      if (!options.elPopup) {
        options.elPopup = Element.create { popup, type: options.type, [ { content, "" } ] };
        self.$(head).append(options.elPopup);
      }
    }
    return this.notify(options);  
  }

  function loading(messageOrOptions, busy = false, disabled = false) {
    var options = typeof messageOrOptions == #object ? messageOrOptions: { message: messageOrOptions, busy: busy, disabled: disabled };
    options.type = TYPE_LOADING;
    if (!options.elPopup) {
      options.elPopup = self.$(popup[type={options.type}]);
      if (!options.elPopup) {
        options.elPopup = Element.create { popup, type: options.type, [ { icon, "" }, { content, "" } ] };
        self.$(head).append(options.elPopup);
      }
    }
    return this.notify(options);  
  }

}
