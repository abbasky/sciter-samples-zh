class AutoComplete : Behavior {

  var me = null;
  
  function attached() {
    this.$append(<span></span>);
    this.$append(<input|text />);
    this.$append(<popup />);
    
    me = this;
    
    this.candidate = this.$(span);
    this.input = this.$(input);
    this.candidates = this.$(popup);
  }
  
  event change $(input) { this.onTextChange(); }
  event change $(mouseup) { this.input.state.focus = true; }
  event click  $(popup>text) (evt,elText) { this.setText(elText.text, elText.attributes["data-id"]) }
  
  function onTextChange()
  {
    var text = this.input.value;
    if( text )
    {
      var caretPos = this.input.selectionStart();
      this.input.value = text = text.toUpperCase();
      this.input.setSelection(caretPos,caretPos); 
      var list = this.getCandidates(text);
      this.candidates.clear();
      for(var li in list) 
        this.candidates.$append(<text data-id="{li.id}">{li.text}</text>);
      this.candidate.value = list.length ? list[0] : "";
      if (list.length > 0) 
      {
        this.popup( this.candidates , (8 << 16) | 2);
        this.input.state.focus = true;  
      } 
      else {
        this.candidates.closePopup();
        this.refresh();
      }
    }
    else {
      this.candidates.state.popup = false;
      this.candidate.value = "";
    }
      
  }
  
  property popupList(v) {
    get {
     return me._popupList;
    }
     
    set {
      me._popupList = v;
    }
  } 
  
  function getCandidates(forText) {
  
    var pattern = forText + "*";
  
    return me._popupList.filter(:item: item.text like pattern) ;
  }
  
  function setText(txt,id) {
    this.candidates.state.popup = false;
    this.input.value = txt;
    this.input.setSelection(0,txt.length); 
    this.input.state.focus = true;
  }
  
  
}