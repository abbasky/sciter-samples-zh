<html>
  <head>
    <title>Plus: very basic sample</title>
    <style>
      @import url(../plus.css); /* 仅需引入Plus框架 */
      @import url(../../note.css); 
      @import url(../../widgets/switch/switch.css); 
      
      html { font:system; }
      
      section#items { width:6*; margin:1em 2*; }
      
      section#items > input.new { margin-left:4em; width:*; display:block; min-width:235dip; }
      
      section#items > ol { width:*; margin-top:4px; }
      section#items > ol > li { flow:horizontal; border-bottom:1px solid dotted;}
      section#items > ol > li > input[type=checkbox] { display: block; vertical-align:middle;}
      section#items > ol > li > input[type=text] { display: block; width:*; vertical-align:middle; background:white;}
      section#items > ol > li.done > output { text-decoration:line-through; }
      section#items > ol > li > b { behavior:clickable; font-size:150%; display:block; visibility:hidden; cursor: pointer; }
      section#items > ol > li:hover { color:red; }
      section#items > ol > li:hover > b { visibility:visible; }

	  input:empty { color: gray; }
      
    </style>
    
    <script type="text/tiscript">
    
      include "../plus.tis"; // 因为要使用@observing，所以需要引入plus.tis
  
      namespace Todo // 我们的模型
      {  
        var items = [ {subject:"基础 变量 绑定 示例", done:true},
                      {subject:"基础 函数 绑定 示例", done:true},
                      {subject:"基础 重复项 绑定 示例", done:true},
                      {subject:"重复项 表格(table) 示例", done:true},
                      {subject:"CSS class绑定 示例", done:true},
                      {subject:"重复项过滤 示例", done:false},
                      {subject:"UI事件处理 Plus风格", done:false},
                    ];
                    
        function addNewFrom(el) // 被input|text.new元素的@enter事件调用
        {
          items.unshift { subject:el.value, done:false }; // 在列表最前面插入新项
          el.value = undefined;
        }
        
        @observing "items[]",  
                   "items[].subject",  
                   "items[].done"  
        function showItems() {
          $(#out).value = String.printf("%v",items).replace("},", "},\n ");
        }   
      }    
    
    </script>
  </head>

<body model="Todo"> <!-- 定义我们要观察的数据模型 -->

  <note>下面的列表绑定了<code>Items</code>数组。这个示例演示如何处理ENTER按键处理，和按钮点击处理(点击移除某项)。
    <br>列表中支持'active'属性的元素参见plus.css文件。
    <br>列表中每一项都是可编辑的，并且绑定到对应记录中的subject字段。</note>

  <section #items>
    
    <input|text .new novalue="请输入下一个待做事项，然后按ENTER键" enter="addNewFrom(this)"/> 
  
    <ol each="index,item in items">
      <li class="done:item.done">
           <input|checkbox(item.done)/>
           <input|text(item.subject)/> 
           第 <output(index)/>/<output(items.length)/> 记录
           <b click="items.removeByValue(item)">&times;</b></li>
    </ol>
  </section>
  
  <p>Items中的数据:</p>
  <pre #out></pre>
  
  
  
</body>
</html>
