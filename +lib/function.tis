
//|
//| 创建一个函数并绑定到指定对象上(设置this，参数可省略)
//|

function Function.bind(context, bindargs..) 
{
    return function(args..) {
      if(bindargs.length)
        return (this super).apply(context, bindargs.concat(args));
      else
        return (this super).apply(context, args);
    };
}

//| 
//| 缓存一个昂贵(费时)函数的结果
//| 

function Function.memoize(hasher = null) 
{
  assert !hasher || typeof hasher == #function;
  var memo = {};
  return function(args..) {
    var key = hasher ? hasher.apply(this, args) : args;
    var val = memo[key];
    if( val === undefined )
      memo[key] = val = (this super).apply(this, args);
    return val;
  };
}

//| 
//| 在函数的this上下文不变的情况下，使用Function.partial封装这个函数，
//| 缓存这个函数的一部分预先填充的参数
//| 

function Function.partial(pargs..) {
  return function(args..) {
    return (this super).apply(this, pargs.concat(args));
  };
};


//|
//| 在延时milliseconds毫秒后使用指定的args参数调用这个函数,。
//|
function Function.delay(milliseconds, args..) {
  self.timer(milliseconds, :: (this super).apply(null, args), true );
}

//|
//| 推迟执行一个函数，使这个函数在"当前调用堆栈清空"后执行。
//|
function Function.defer(args..) {
  var func = this;
  self.post( :: func.apply(null, args) );
}

//| throttle: 节流、减速 函数
//| 返回一个函数，这个函数在指定时间内不管调用多少次，一般只执行一次。
//| 通常情况下, 减速函数尽可能多的执行，但milliseconds期间内不会超过1次。 
//| 但如果你想禁止在milliseconds期间的起始边缘执行，options参数传递{leading: false}。
//| 同上，如果你想禁止在milliseconds期间的结束边缘执行，options参数传递{trailing: false}。
//| 

function Function.throttle(milliseconds, options = {}) {
  var context, args, result;
  var running = false;
  var previous = 0;
  var func = this;
  milliseconds = milliseconds.toInteger();
  function later() {
    previous = options.leading === false ? 0 : Date.ticks();
    running = false;
    result = func.apply(context, args);
  };
  return function(arguments..) {
    var now = Date.ticks();
    if (!previous && options.leading === false) previous = now;
    var remaining = milliseconds - (now - previous);
    context = this;
    args = arguments;
    if (remaining <= 0) {
      self.timer(0,later,true);
      running = false;
      previous = now;
      result = func.apply(context, args);
    } else if (!running && options.trailing !== false) {
      running = true;
      self.timer(remaining, later,true);
    }
    return result;
  };
}

//| debounce: 去抖、防反跳 函数
//| 返回一个函数，这个函数如果它一直被调用，则不会触发，
//| 直到在等待milliseconds毫秒内都未调用时才触发一次。 
//| 如果传递了immediate参数，则将会在milliseconds期间的起始位置触发，而不是末尾位置。 
//| 

 function Function.debounce(milliseconds, immediate = false) {
  var running = false, args, context, timestamp, result;
  milliseconds = milliseconds.toInteger();
  var func = this;
  return function(arguments..) 
  {
    context = this;
    args = arguments;
    timestamp = Date.ticks();
    var later = function() 
    {
      var last = Date.ticks() - timestamp;
      if (last < milliseconds) {
        running = true;
        self.timer(milliseconds - last, later, true);
      } else {
        running = false;
        if (!immediate) result = func.apply(context, args);
      }
    };
    var callNow = immediate && !running;
    if (!running) {
      running = true;
      self.timer(milliseconds, later, true);
    }
    if (callNow) result = func.apply(context, args);
    return result;
  };
}

//| 
//| 返回一个函数，该函数不管你调用它多少次，它将最多只会被执行一次， 
//| 该函数对于懒初始化是很有用的。
//| 

function Function.once() {
  var ran = false, memo;
  return function(args..) {
    if (!ran) {
      ran = true;
      memo = (this super).apply(this, args);
    }
    return memo;
  };
}

//|   
//| 返回一个封装函数，该封装函数的第二个参数指向第一个函数，
//| 该封装函数允许你在代码执行前后调整参数，并且可以有条件地是否执行原始函数。
//| 
  
function Function.wrap(wrapper) {
  return function(arguments..) {
    return wrapper.apply(this,(this super),arguments);
  };
}

//| 
//| 返回一个函数，该函数是一个函数列表的组合体，
//| 其中每个函数的参数是前一个函数的返回值。
//| 列表中的每个函数可以返回一个数组。数组中的每一个元素都将会作为列表中下一个函数的参数。
//| 注意: 函数列表中的第一个函数将被首先执行。
//|

function Function.batch(funcs..) {
  return function(arguments..) {
    var args = arguments;
    for (var i = 0; i < funcs.length; ++i) {
    if( typeof args == #array )
      args = funcs[i].apply(this, args);
    else
      args = funcs[i].call(this, args);
    }
    return args;
  };
}