
//| pluck: 摘取
//| 返回一个新数组，它拥有相同数量的元素，
//| 其中每个元素是this[key]属性的值。 
//|

function Array.pluck(key) {
  var out = new Array(this.length);
  for(var (i,v) in this) out[i] = v[key];
  return out;
}

//| shuffle: 洗牌
//| 对数组中元素进行洗牌(打乱)，使用Fisher-Yates洗牌的现代算法：
//|   每次从未处理的数据中随机取出一个数字，然后把该数字放在数组的尾部，
//|   即数组尾部存放的是已经处理过的数字 。
//| 
function Array.shuffle() {
    var ri; const rnd = rand; // 全局方法rand()函数的简写形式
    var shuffled = new Array(this.length);
    for(var (i,v) in this ) {
      ri = rnd(i);
      shuffled[i] = shuffled[ri];
      shuffled[ri] = v;
    }
    return shuffled;
  }
  
//|   
//| 根据criterion条件对对象的值进行分组
//| criterion可以是一个用于分组的字符串属性， 
//| 也可以是一个返回criterion的函数。 
//| 
  
function Array.groupBy(criterion) {
  var result = {};
  var group = typeof criterion == #function ? criterion : (:v: v[criterion] );
  for( var v in this ) {
    var key = group(v);
    if(key in result) 
      result[key].push(v);
    else 
      result[key] = [v];
  } 
  return result;
}

//|
//| 将多个列表(数组)打包到一个数组中,
//| 这些列表(数组)中的元素共享同一个索引。
//|
//| 注意：可以这样使用:
//|
//|  var z = [['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]].zip(); 
//| 或者： 
//|  var z = Array.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);
//|  
//| 得到的z为：[["moe", 30, true], ["larry", 40, false], ["curly", 50, false]];
//|  
  
function Array.zip(args..) 
{
  var arrays = args.length ? args : this;
  var length = arrays.reduce( :ml,v: v.length > ml?v.length:ml , 0);
  var results = new Array(length);
  for (var i in length)
    results[i] = arrays.pluck(i);
  return results;
}